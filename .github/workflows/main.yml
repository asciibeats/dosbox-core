name: CI

on:
  push:
  pull_request:

jobs:
#  build_libnx:
#    runs-on: ubuntu-latest
#    container: devkitpro/devkita64

#    env:
#      SINGLE_CORE: dosbox_core
#      FORCE: YES
#      EXIT_ON_ERROR: 1

#    steps:
#      - run: apt-get -y update

#      - name: Install deps
#        run: |
#          apt-get -y install \
#            git \
#            zip
#          wget -q 'https://github.com/Kitware/CMake/releases/download/v3.17.2/cmake-3.17.2-Linux-x86_64.sh'
#          sh ./cmake-3.17.2-Linux-x86_64.sh --skip-license --prefix=/usr/local

#      - name: Set up libretro-super
#        working-directory: /
#        run: |
#          git clone --depth=1 'https://github.com/libretro/libretro-super.git'
#          sed -i \
#            "s|^dosbox_core libretro-dosbox_core https://github.com/libretro/dosbox-core.git libretro |dosbox_core libretro-dosbox_core https://github.com/realnc/dosbox-core.git ${GITHUB_REF##refs/heads/} |g" \
#            libretro-super/recipes/nintendo/libnx

#      - name: Build
#        working-directory: /libretro-super
#        run: |
#          ./libretro-buildbot-recipe.sh recipes/nintendo/libnx
#          zip -j -9 retroarch-nintendo-switch.zip retroarch/pkg/libnx/retroarch/cores/dosbox_core_libretro_libnx.nro

#      - name: Upload artifact
#        if: github.event_name == 'push'
#        uses: actions/upload-artifact@v2
#        with:
#          name: retroarch-nintendo-switch.zip
#          path: /libretro-super/retroarch-nintendo-switch.zip

  build_linux_arm:
    # We run this in an Ubuntu ARM image inside QEMU which is very slow, so skip this when not
    # building release binaries.
    if: github.event_name == 'push' && github.ref == 'refs/heads/libretro'
    runs-on: ubuntu-latest

    steps:
    - name: Install QEMU
      run: |
        sudo apt-get -y update
        sudo apt-get -y install qemu-user-static

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      run: |
        docker run \
          -v /usr/bin/qemu-arm-static:/usr/bin/qemu-arm-static \
          -v "$PWD":/build \
          -w /build/libretro \
          arm32v7/ubuntu:16.04 \
          bash -c '(
            set -eux
            apt-get -y update
            apt-get -y install software-properties-common wget
            add-apt-repository -y --update ppa:ubuntu-toolchain-r/test
            add-apt-repository -y --update ppa:janisozaur/cmake-update
            apt-get -y install \
                autoconf \
                automake \
                build-essential \
                cmake \
                g++-9 \
                gcc-9 \
                gettext \
                git \
                libasound2-dev \
                libglu1-mesa-dev \
                libtool \
                libtool-bin \
                mesa-common-dev \
                pkg-config \
                wget
            wget -q 'https://github.com/mesonbuild/meson/releases/download/0.55.3/meson-0.55.3.tar.gz' -O- \
                | tar xz -C /opt
            mv /opt/meson-* /opt/meson
            git clone 'https://github.com/ninja-build/ninja.git'
            cd ninja
            git checkout tags/v1.10.1
            ln -s /usr/bin/python3 /usr/local/bin/python
            ./configure.py --bootstrap
            mv ninja /usr/local/bin/
            cd ..
            export CC=gcc-9
            export CXX=g++-9
            export BUNDLED_AUDIO_CODECS=1
            export BUNDLED_GLIB=1
            export BUNDLED_LIBSNDFILE=1
            export BUNDLED_SDL=1
            export CMAKE_GENERATOR=Ninja
            export MESON=/opt/meson/meson.py
            export NINJA=/usr/local/bin/ninja
            export STATIC_LIBCXX=1
            export WITH_BASSMIDI=1
            export WITH_DYNAREC=arm
            export WITH_FLUIDSYNTH=1
            export WITH_VOODOO=1
            export platform=unix
            make deps
            make -j2
            strip dosbox_core_libretro.so
          )'
        cd libretro
        zip -9 linux-armhf.zip dosbox_core_libretro.so

    - name: Upload artifact
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v2
      with:
        name: linux-armhf.zip
        path: libretro/linux-armhf.zip

  build_linux_x64:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      run: |
        docker run \
          -v "$PWD":/build \
          -w /build/libretro \
          amd64/ubuntu:16.04 \
          bash -c '(
            set -eux
            apt-get -y update
            apt-get -y install software-properties-common wget
            add-apt-repository -y --update ppa:ubuntu-toolchain-r/test
            add-apt-repository -y --update ppa:janisozaur/cmake-update
            apt-get -y install \
                autoconf \
                automake \
                build-essential \
                cmake \
                g++-9 \
                gcc-9 \
                gettext \
                git \
                libasound2-dev \
                libglu1-mesa-dev \
                libtool \
                libtool-bin \
                mesa-common-dev \
                pkg-config \
                wget
            wget -q 'https://github.com/mesonbuild/meson/releases/download/0.55.3/meson-0.55.3.tar.gz' -O- \
                | tar xz -C /opt
            mv /opt/meson-* /opt/meson
            git clone 'https://github.com/ninja-build/ninja.git'
            cd ninja
            git checkout tags/v1.10.1
            ln -s /usr/bin/python3 /usr/local/bin/python
            ./configure.py --bootstrap
            mv ninja /usr/local/bin/
            cd ..
            export CC=gcc-9
            export CXX=g++-9
            export BUNDLED_AUDIO_CODECS=1
            export BUNDLED_GLIB=1
            export BUNDLED_LIBSNDFILE=1
            export BUNDLED_SDL=1
            export CMAKE_GENERATOR=Ninja
            export MESON=/opt/meson/meson.py
            export NINJA=/usr/local/bin/ninja
            export STATIC_LIBCXX=1
            export WITH_BASSMIDI=1
            export WITH_DYNAREC=x86_64
            export WITH_FLUIDSYNTH=1
            export WITH_VOODOO=1
            export platform=unix
            make deps
            make -j`nproc`
            strip dosbox_core_libretro.so
          )'
        cd libretro
        zip -9 linux-x64.zip dosbox_core_libretro.so

    - name: Upload artifact
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v2
      with:
        name: linux-x64.zip
        path: libretro/linux-x64.zip

  build_macos:
    runs-on: macos-10.15

    env:
      CC: gcc-9
      CXX: g++-9
      platform: osx
      WITH_DYNAREC: x86_64
      STATIC_LIBCXX: 1
      BUNDLED_AUDIO_CODECS: 0
      BUNDLED_LIBSNDFILE: 0
      BUNDLED_SDL: 0
      PKG_CONFIG_FLAGS: --static
      MACOS_SDK_PATH: /usr/local/MacOSX10.14.sdk
      MACOS_DEPLOYMENT_TARGET: 10.13
      EXTRA_CMAKE_FLAGS: -DCMAKE_OSX_SYSROOT=/usr/local/MacOSX10.14.sdk -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13

    steps:
    - name: Replace homebrew
      working-directory: /usr/local
      run: |
        sudo mkdir ~/oldbrew
        sudo mv * ~/oldbrew
        curl -s -S -L 'https://github.com/realnc/stuff/releases/download/stuff/homebrew-10.13.tar.xz' | sudo tar xJ
        rm bin/brew

    - name: Install 10.14 SDK
      working-directory: /usr/local
      run: |
        curl -s -S -L 'https://github.com/realnc/stuff/releases/download/stuff/MacOSX10.14.sdk.tar.xz' | sudo tar xJ

    # Since macOS is developed by monkeys, we have to do this shit to get static linking against
    # homebrew-installed libraries.
    - name: Symlink static homebrew libs
      working-directory: /usr/local
      run: |
        sudo mkdir static_libs
        sudo ln -s /usr/local/{lib,opt/libffi/lib}/*.a static_libs/

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      working-directory: ./libretro
      run: |
        make deps
        export LDFLAGS="-L /usr/local/static_libs"
        make -j`sysctl -n hw.ncpu`
        strip -u -r -S dosbox_core_libretro.dylib
        zip -9 macOS-x64.zip dosbox_core_libretro.dylib

    - name: Upload artifact
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v2
      with:
        name: macOS-x64.zip
        path: libretro/macOS-x64.zip

  build_mxe:
    strategy:
      matrix:
        config:
          - {image: 'realnc/dosbox-core-build:mxe-x86', triplet: i686-w64-mingw32.static, dynarec: x86, zip_name: windows-x86.zip}
          - {image: 'realnc/dosbox-core-build:mxe-x64', triplet: x86_64-w64-mingw32.static, dynarec: x86_64, zip_name: windows-x64.zip}

    runs-on: ubuntu-latest
    container: ${{ matrix.config.image }}

    env:
      CC: gcc
      platform: win
      TARGET_TRIPLET: ${{ matrix.config.triplet }}
      STATIC_LIBCXX: 0
      BUNDLED_AUDIO_CODECS: 0
      BUNDLED_LIBSNDFILE: 0
      BUNDLED_SDL: 0
      WITH_DYNAREC: ${{ matrix.config.dynarec }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      working-directory: ./libretro
      run: |
        make deps
        make -j`nproc`
        ${{ matrix.config.triplet }}-strip dosbox_core_libretro.dll
        zip -9 ${{ matrix.config.zip_name }} dosbox_core_libretro.dll

    - name: Upload artifact
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.zip_name }}
        path: libretro/${{ matrix.config.zip_name }}

  upload_build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/libretro'
    runs-on: ubuntu-latest
    needs: [
      #build_libnx,
      build_linux_arm,
      build_linux_x64,
      build_macos,
      build_mxe,
    ]

    steps:
    - uses: actions/download-artifact@v2

    - uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest_build"
        prerelease: true
        title: "Latest Build"
        files: |
          linux-armhf.zip
          linux-x64.zip
          macOS-x64.zip
          #retroarch-nintendo-switch.zip
          windows-x64.zip
          windows-x86.zip
